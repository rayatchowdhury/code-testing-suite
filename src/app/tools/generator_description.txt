GENERATOR.H - COMPREHENSIVE TEST CASE GENERATOR LIBRARY GUIDE

BASIC RANDOM GENERATION:
1. random<T>(T l, T r): Generate random value in range [l,r]
Supported types and examples:
- Integers: random<int>(1, 100)             // Random int from 1 to 100
- Long long: random<long long>(1LL, 1e18)   // Large random number
- Float: random<float>(0.0, 1.0)            // Random float with decimals
- Double: random<double>(-10.5, 10.5)       // Random double with decimals
- Char: random<char>('a', 'z')              // Random lowercase letter

2. random(vector/string): Select random element
Examples:
- vector<int> v = {1, 2, 3, 4, 5};
  int x = random(v);                        // Random element from vector
- string s = "abc";
  char c = random(s);                       // Random character from string

CONTAINER GENERATORS:

1. rvector<T> - Random Vector
Methods:
- rvector<T>(size_t length, T l, T r)
- rvector<T>(size_t length, vector<T> &a)
Advanced Examples:
```
rvector<int> nums(10, 1, 100);          // 10 random numbers from 1-100
rvector<char> chars(5, 'A', 'Z');       // 5 random uppercase letters
vector<string> words = {"apple", "banana", "orange"};
rvector<string> rwords(3, words);       // 3 random words from the list
```

2. permutation - Random Permutation
Advanced Usage:
```
permutation p1(5);                      // Random order of [1,2,3,4,5]
permutation p2(3, 0);                   // Random order of [0,1,2]
// Use for generating test cases requiring unique ordered elements
```

3. unique_vector<T> - Vector of Unique Random Elements
Advanced Examples:
```
unique_vector<int> uv1(5, 1, 10);      // 5 unique numbers from 1-10
unique_vector<char> uv2(3, 'A', 'F');  // 3 unique uppercase letters A-F
```
4. rstring - Random String Generator
Advanced Usage:
```
rstring rs1(10, 'a', 'z');             // 10 random lowercase letters
rstring rs2(5, "01");                  // 5 random binary digits
rstring rs3(8, "aeiou");              // 8 random vowels
// Useful for generating:
// - Random DNA sequences: rstring(n, "ACGT")
// - Random passwords: rstring(n, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
```
5. rmatrix<T> - Random Matrix
Advanced Examples:
```
rmatrix<int> m1(3, 3, 1, 10);         // 3×3 matrix with values 1-10
rmatrix<char> m2(2, 3, 'A', 'Z');     // 2×3 character matrix
vector<int> vals = {0, 1};
rmatrix<int> m3(4, 4, vals);          // 4×4 binary matrix
// Custom separators in print:
m1.print(" ");                         // Space-separated
m1.print(",");                         // Comma-separated
```
GRAPH GENERATORS:
1. Tree<WeightType> - Random Tree
Advanced Usage:
```
Tree<int> t1(10);                      // 10-vertex unweighted tree
Tree<int> t2(5, 1, 100);              // 5-vertex tree, weights 1-100
Tree<double> t3(7, 0.1, 1.0);         // Tree with double weights
```
2. BinaryTree<WeightType> - Random Binary Tree
Advanced Examples:
```
BinaryTree<int> bt1(7);               // 7-node unweighted binary tree
BinaryTree<int> bt2(5, 1, 10);       // Weighted binary tree
```
3. Graph<WeightType> - Random Graph
Advanced Usage:
```
Graph<int> g1(5, 7);                  // 5 vertices, 7 edges
Graph<int> g2(6, 10, 1, 100);        // 6 vertices, 10 edges, weights 1-100

```
4. points - Random 2D Points
Advanced Examples:
```
points p1(5, 0, 100);                // 5 points in [0,100]×[0,100]
points p2(3, -10, 10, 0, 20);        // 3 points with x∈[-10,10], y∈[0,20]

```
BEST PRACTICES:
1. All containers have print() method for easy output (ex. v.print(),points.print(),GRAPH.print() etc)