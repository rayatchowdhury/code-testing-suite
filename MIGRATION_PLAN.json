{
  "migrationPlan": {
    "version": "3.0",
    "description": "Detailed, atomic migration plan with risk mitigation",
    "bloatAnalysis": {
      "issues": [
        "QtWebEngine bloat - Used only for HTML rendering",
        "Duplicate AI validators in utils/ and ai/validation/",
        "Heavy PySide6-AddOns may not be fully utilized",
        "Complex styling system with 17+ component files"
      ],
      "optimizations": [
        "Replace QtWebEngine with QTextBrowser for static HTML",
        "Consolidate duplicate validation code", 
        "Audit PySide6-AddOns usage",
        "Preserve current styling system during migration"
      ]
    },
    "phases": [
      {
        "phase": 1,
        "name": "Preparation & Safety",
        "steps": [
          {
            "step": "0.1", 
            "title": "Create Backup & Testing Infrastructure",
            "scope": "Setup safety nets before any changes",
            "duration": "1-2 hours",
            "files": ["backup_current_state.py", "test_basic_functionality.py", "check_imports.py"],
            "risks": "None - only adds safety infrastructure",
            "rollback": "Delete new files",
            "checklist": [
              "Backup script successfully creates archive",
              "Smoke tests pass on current codebase", 
              "All windows open without errors"
            ]
          },
          {
            "step": "0.2",
            "title": "Initialize pyproject.toml (Minimal)",
            "scope": "Add pyproject.toml alongside requirements.txt",
            "duration": "30 minutes",
            "files": ["pyproject.toml", ".gitignore updates"],
            "risks": "None - only adds files",
            "rollback": "Delete pyproject.toml and revert .gitignore",
            "checklist": [
              "pip install -e . works",
              "Application still runs with python main.py",
              "No dependency conflicts"
            ]
          },
          {
            "step": "0.3", 
            "title": "Create src/ Structure (Empty)",
            "scope": "Create directory structure without moving files",
            "duration": "15 minutes",
            "files": ["src/app/ directories with empty __init__.py"],
            "risks": "None - only directory creation",
            "rollback": "Delete src/ directory"
          }
        ]
      },
      {
        "phase": 2,
        "name": "Incremental Code Movement", 
        "steps": [
          {
            "step": "1.1",
            "title": "Move main.py Only",
            "scope": "Move only the entry point, test thoroughly",
            "duration": "1 hour",
            "files": ["main.py -> src/app/__main__.py"],
            "risks": "Low - only entry point changes",
            "rollback": "Move __main__.py back to main.py",
            "testing": ["python src/app/__main__.py works", "python -m app works", "All functionality intact"]
          },
          {
            "step": "1.2",
            "title": "Move constants/ (Safest First)",
            "scope": "Move constants package with compatibility shim",
            "duration": "45 minutes", 
            "files": ["constants/ -> src/app/shared/constants/"],
            "compatibilityShim": true,
            "risks": "Low - constants are leaf dependencies",
            "rollback": "Move back to constants/, remove shim"
          },
          {
            "step": "1.3",
            "title": "Move utils/ (Second Safest)",
            "scope": "Move utils package with deduplication",
            "duration": "2 hours",
            "files": ["utils/ -> src/app/shared/utils/"],
            "actions": [
              "Compare utils/api_validator.py vs ai/validation/api_validator.py",
              "Keep more comprehensive version in ai/validation/",
              "Create import alias in utils/ location"
            ],
            "risks": "Medium - utils are widely used",
            "rollback": "Move back, restore duplicate file"
          }
        ]
      },
      {
        "phase": 3,
        "name": "Layer Organization",
        "steps": [
          {
            "step": "2.1",
            "title": "Move database/ to persistence/",
            "scope": "Move database package to persistence layer", 
            "duration": "45 minutes",
            "files": ["database/ -> src/app/persistence/", "Add file_store.py"],
            "risks": "Low - database has limited dependents"
          },
          {
            "step": "2.2", 
            "title": "Move styles/ to presentation/styles/ (CRITICAL)",
            "scope": "Move styling system while preserving ALL current appearance",
            "duration": "3-4 hours",
            "riskLevel": "HIGH",
            "files": ["styles/ -> src/app/presentation/styles/"],
            "criticalActions": [
              "Preserve exact import structure",
              "Maintain all component imports",
              "Create comprehensive compatibility shim",
              "Take before/after screenshots for comparison"
            ],
            "testingProtocol": [
              "Take screenshots of all windows before changes",
              "Compare pixel-perfect with before screenshots",
              "Test all themes/color schemes",  
              "Verify all syntax highlighting works",
              "Check all custom widgets (sliders, buttons, etc.)",
              "Validate scrollbars, splitters, console colors",
              "Test all dialog styles",
              "Verify AI panel styling",
              "Check results table formatting"
            ],
            "rollbackStrategy": "Keep exact backup of styles/ until Phase 4 complete"
          },
          {
            "step": "2.3",
            "title": "Move views/ and widgets/ to presentation/",
            "scope": "Move UI components to presentation layer",
            "duration": "2 hours", 
            "files": ["views/ -> src/app/presentation/views/", "widgets/ -> src/app/presentation/widgets/"]
          }
        ]
      },
      {
        "phase": 4,
        "name": "Architecture Refactoring",
        "steps": [
          {
            "step": "3.1",
            "title": "Move ai/ to core/ai/",
            "duration": "1.5 hours",
            "files": ["ai/ -> src/app/core/ai/"]
          },
          {
            "step": "3.2", 
            "title": "Move tools/ to core/tools/",
            "duration": "1 hour",
            "files": ["tools/ -> src/app/core/tools/"]
          },
          {
            "step": "3.3",
            "title": "Move config/ Logic to core/, UI to presentation/",
            "duration": "2 hours",
            "files": [
              "config/management/ -> src/app/core/config/",
              "config/validation/ -> src/app/core/config/",
              "config/ui/ -> src/app/presentation/features/config/",
              "config/config_exceptions.py -> src/app/shared/exceptions.py"
            ]
          }
        ]
      },
      {
        "phase": 5,
        "name": "Feature Organization",
        "steps": [
          {
            "step": "4.1",
            "title": "Create presentation/features/ Structure",
            "duration": "30 minutes",
            "scope": "Create feature directories without moving files yet"
          },
          {
            "step": "4.2",
            "title": "Move Code Editor Feature", 
            "duration": "1.5 hours",
            "scope": "Move all code editor related files to one feature directory"
          },
          {
            "step": "4.3-4.5",
            "title": "Move Other Features",
            "duration": "1.5 hours each",
            "scope": "Similar process for stress tester, TLE tester, and results"
          },
          {
            "step": "4.6",
            "title": "Create shared_widgets/",
            "duration": "2 hours",
            "scope": "Identify truly shared widgets and separate from feature-specific ones"
          }
        ]
      },
      {
        "phase": 6,
        "name": "Cleanup & Testing",
        "steps": [
          {
            "step": "5.1",
            "title": "Remove Compatibility Shims (Gradual)",
            "duration": "1 hour per major component",
            "scope": "Remove backward compatibility layer once all imports updated"
          },
          {
            "step": "5.2",
            "title": "Optimize Dependencies", 
            "duration": "2-3 hours",
            "optimizations": [
              "Replace QtWebEngine with QTextBrowser",
              "Audit PySide6-AddOns usage",
              "Mark AI dependencies as optional",
              "Use lighter alternatives where possible"
            ]
          },
          {
            "step": "6.1", 
            "title": "Add Basic Tests",
            "duration": "2 hours",
            "files": [
              "tests/unit/core/test_ai_service.py",
              "tests/unit/persistence/test_database.py", 
              "tests/integration/test_window_creation.py"
            ]
          },
          {
            "step": "7.1",
            "title": "Final Validation & Documentation",
            "duration": "2-3 hours",
            "actions": [
              "Run full application test suite",
              "Update documentation", 
              "Create architecture decision record (ADR)",
              "Update README with new structure"
            ]
          }
        ]
      }
    ],
    "riskMitigation": {
      "beforeEachStep": [
        "Create checkpoint: git tag checkpoint-stepX.Y",
        "Run smoke tests: Ensure current functionality works", 
        "Take screenshots: For UI-related changes",
        "Time-box changes: Don't exceed estimated duration"
      ],
      "rollbackProcess": [
        "Immediate rollback: git reset --hard checkpoint-stepX.Y",
        "Partial rollback: Revert specific commits",
        "Recovery: Use backup script to restore known-good state"
      ],
      "highRiskSteps": [
        {
          "step": "2.2", 
          "reason": "Most critical - affects entire UI appearance"
        },
        {
          "step": "1.2-1.3",
          "reason": "Widely imported modules"
        },
        {
          "step": "4.1-4.6", 
          "reason": "Complex import changes"
        }
      ],
      "successCriteria": {
        "phase1": "Application starts and runs identically to before",
        "phase2": "All UI components look and function exactly the same", 
        "phase3": "All features work with new core organization",
        "phase4": "Feature-based organization complete",
        "phase5": "Codebase is clean and well-organized",
        "phase6": "Tests pass, documentation updated"
      }
    }
  },
  "recommendations": {
    "blockingIO": {
      "title": "Handling Blocking IO in UI Code", 
      "recommendation": "Leverage qasync and asyncio consistently. Offload all blocking operations to QThreadPool or use async-native libraries. Encapsulate within core service layer."
    },
    "serviceSeparation": {
      "title": "Separating Services from Views",
      "recommendation": "Enforce one-way dependency: presentation -> core. Use dependency injection and Qt signals for communication back to UI."
    },
    "incrementalTests": {
      "title": "Adding Tests Incrementally",
      "recommendation": "Start with UI-decoupled core and persistence layers. Use pytest for unit tests, pytest-qt for UI workflows."
    },
    "binaryOptimization": {
      "title": "Reducing Binary Size",
      "recommendation": "Replace QtWebEngine with QTextBrowser, consolidate duplicate code, audit heavy dependencies, mark AI features as optional."
    }
  }
}
