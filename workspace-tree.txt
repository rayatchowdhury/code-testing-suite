Workspace Tree with Descriptions (final_project)

.\
|-- .git\                      - Git metadata
|-- .gitignore                  - Git ignore rules
|-- main.py                     - Application entry; sets up PySide6 + qasync; launches MainWindow
|-- requirements.txt            - Python dependencies (PySide6, qasync, google-generativeai, etc.)
|-- readme.md                   - Project README with screenshots and usage
|-- v2-structure-proposal.md    - Proposed modular V2 folder structure and rules
|-- migration-strategy.md       - Stepwise plan to migrate to V2 structure
|-- constants\                  - Centralized constants (mainly paths/resources)
|   |-- __init__.py             - Re-exports from paths.py (APP_ICON, USER_DATA_DIR, etc.)
|   |-- paths.py                - Project/user-data paths, resource helpers (icons/help), ensure_user_data_dir
|   \-- __pycache__\           - Python bytecode cache
|
|-- resources\                  - Sample source files and static assets
|   |-- a.cpp                   - Sample C++ code
|   |-- a.py                    - Sample Python code
|   |-- generator.h             - Header used by stress test generators
|   |-- Main.java               - Sample Java program
|   |-- tmp.cpp                 - Temporary/sample C++ source
|   |-- icons\                  - App icons used by the UI
|   |   |-- app_icon.png        - Main application icon
|   |   |-- check.png           - Checkmark icon
|   |   |-- logo.png            - Logo image
|   |   \-- settings.png        - Settings gear icon
|   \-- readme\                - Images embedded in README
|       |-- editor_window.png   - Screenshot: editor window
|       |-- header_image.png    - README header image
|       |-- help_center.png     - Screenshot: help center
|       |-- main_window.png     - Screenshot: main window
|       |-- results.png         - Screenshot: results view
|       \-- stress_window.png   - Screenshot: stress tester
|
|-- styles\                     - Style system (Qt stylesheets and constants)
|   |-- __init__.py             - Exports common style symbols
|   |-- html.css                - CSS for QWebEngineView content
|   |-- style.py                - Aggregated styles (DISPLAY_AREA_STYLE, WEBVIEW_STYLE, etc.)
|   |-- __pycache__\           - Python bytecode cache
|   |-- components\             - Component-specific style modules
|   |   |-- __init__.py         - Styles export
|   |   |-- ai_panel.py         - Styles for AI panel
|   |   |-- code_editor_display_area.py - Styles for code editor display container
|   |   |-- console.py          - Styles for console output widget
|   |   |-- editor.py           - Styles for editor tabs/areas
|   |   |-- scrollbar.py        - Custom scrollbar stylesheet
|   |   |-- sidebar.py          - Styles for sidebar
|   |   \-- splitter.py         - Styles for splitters
|   \-- constants\              - Theme/color constants
|       |-- __init__.py         - Exports color constants
|       |-- colors.py           - Material/brand color palette
|       |-- editor_colors.py    - Editor-specific color values
|       \-- __pycache__\       - Python bytecode cache
|
|-- tools\                       - Headless logic for compilation, AI, stress/TLE orchestration
|   |-- compiler_runner.py      - Compile/run C++/Python/Java via QProcess; stream output to console
|   |-- editor_ai.py            - Gemini-based AI assistant (async); loads config from USER_DATA_DIR
|   |-- generator_description.txt - Reference docs for generator feature
|   |-- stresser.py             - Compile generator/correct/test and run stress tests (threaded worker)
|   |-- stress_compiler_runner.py - Threaded wrapper around compiler runner for stress UI
|   |-- tle_compiler_runner.py  - Compile single C++ file and report to TLE console
|   |-- tle_runner.py           - Compile generator/test and run with per-test time limit
|   \-- __pycache__\           - Python bytecode cache
|
|-- utils\                       - Utilities shared across UI
|   |-- ai_config.py            - AI configuration helpers (e.g., enablement, defaults)
|   |-- api_validator.py        - Validation helpers for API/config values
|   |-- file_operations.py      - File IO operations + dialogs (open/save, filters, size formatting)
|   |-- window_factory.py       - Lazy window factory mapping names to window classes
|   |-- window_manager.py       - QStackedWidget manager with history and cleanup
|   \-- __pycache__\           - Python bytecode cache
|
|-- views\                       - Qt windows and feature UIs
|   |-- base_window.py          - SidebarWindowBase (splitter, back/options handling)
|   |-- main_window.html        - HTML landing page content for main window
|   |-- main_window.py          - MainWindowContent (sidebar + webview) and MainWindow shell
|   |-- __pycache__\           - Python bytecode cache
|   |-- code_editor\            - Code editor feature UI
|   |   |-- code_editor_display_area.py - Editor tabs + console; compile/run integration
|   |   |-- code_editor_window.py - Window with sidebar actions; session save/restore
|   |   |-- editor_welcome.html - Welcome screen shown before opening a file
|   |   \-- __pycache__\       - Python bytecode cache
|   |-- config\                 - Configuration UI and logic
|   |   |-- config_exceptions.py - Custom exceptions for config errors
|   |   |-- config_manager.py   - Load/save/validate user config JSON under USER_DATA_DIR
|   |   |-- config_view.py      - Config dialog UI (emits configSaved)
|   |   |-- error_dialog.py     - Reusable error dialog helpers
|   |   |-- styles.py           - Config view-specific styles
|   |   |-- ui_components.py    - Shared config UI components
|   |   \-- __pycache__\       - Python bytecode cache
|   |-- help_center\            - Help center window and content
|   |   |-- help_center_window.py - Help center window controller
|   |   |-- content\            - Static help HTML/content
|   |   \-- __pycache__\       - Python bytecode cache
|   |-- stress_tester\          - Stress testing feature UI
|   |   |-- compilation_status_window.py - Compile status dialog for 3-file chain
|   |   |-- stress_tester_display_area.py - Editor + AI panel + console + file buttons
|   |   |-- stress_tester_window.py - Sidebar window; ties to Stresser
|   |   |-- stress_test_status_window.py - Stress run progress/results dialog
|   |   |-- test_count_slider.py - Slider widget to choose number of stress tests
|   |   |-- stress_results\     - Output/results directory
|   |   \-- __pycache__\       - Python bytecode cache
|   \-- tle_tester\             - TLE testing feature UI
|       |-- time_limit_slider.py - Slider for time limits (ms)
|       |-- tle_tester_display_area.py - Editor/console UI for TLE runs
|       |-- tle_tester_window.py - Sidebar window; ties to TLERunner
|       |-- tle_test_status_window.py - TLE execution progress dialog
|       |-- tle_results\        - Output/results directory
|       \-- __pycache__\       - Python bytecode cache
|
\-- widgets\                     - Reusable widgets used across views
    |-- display_area.py          - DisplayArea container with style and layout
    |-- sidebar.py               - Sidebar with sections, buttons, help, and footer controls
    |-- dialogs\                 - Placeholder for dialog widgets
    |-- display_area_widgets\    - Editor/console/AI panel building blocks
    |   |-- ai_panel.py          - AIPanel UI; emits actions (analysis, tips, generate, etc.)
    |   |-- console.py           - ConsoleOutput widget; shows compile/run output; input support
    |   |-- editor.py            - EditorWidget + CodeEditor (line numbers, syntax, AI integration)
    |   |-- syntaxhighlighter.py - Syntax highlighters (C++, Python, Java)
    |   \-- __pycache__\       - Python bytecode cache
    \-- __pycache__\           - Python bytecode cache
