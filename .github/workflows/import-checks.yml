name: Import Rules & Code Quality

on:
  push:
    branches: [main, develop, refactor/**]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

jobs:
  import-rules:
    name: Check Import Rules
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run import rule checker
        run: python scripts/check_import_rules.py

      - name: Run import rule checker (strict mode)
        run: python scripts/check_import_rules.py --strict
        continue-on-error: true  # Warn only in strict mode

      - name: Check for circular dependencies
        run: python scripts/check_import_rules.py --cycles

  ruff:
    name: Ruff Linting & Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install ruff
        run: pip install ruff

      - name: Run ruff linter
        run: ruff check src/ tests/ scripts/

      - name: Run ruff formatter check
        run: ruff format --check src/ tests/ scripts/

  tests:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run pytest
        run: pytest -v --tb=short

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-cov

      - name: Run tests with coverage
        run: pytest --cov=src/app --cov-report=xml --cov-report=term

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [import-rules, ruff, tests]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.import-rules.result }}" != "success" ]; then
            echo "❌ Import rules check failed"
            exit 1
          fi
          if [ "${{ needs.ruff.result }}" != "success" ]; then
            echo "❌ Ruff check failed"
            exit 1
          fi
          if [ "${{ needs.tests.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          echo "✅ All checks passed!"
