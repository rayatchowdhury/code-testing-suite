name: Automated Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size to avoid too many jobs
          - os: macos-latest
            python-version: 3.9
          - os: macos-latest
            python-version: '3.10'
    
    env:
      # Force headless mode for GUI tests
      QT_QPA_PLATFORM: offscreen
      DISPLAY: ':99.0'
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Setup virtual display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils libxkbcommon-x11-0 libgl1-mesa-glx
        # Start virtual display
        Xvfb :99 -screen 0 1024x768x24 &
        sleep 3
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y \
          libegl1-mesa \
          libfontconfig1 \
          libglib2.0-0 \
          libglu1-mesa \
          libdbus-1-3 \
          libxi6 \
          libxrender1 \
          libxtst6
          
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Install required system libraries for Qt
        brew install pkg-config
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Verify Qt installation
      run: |
        python -c "from PySide6.QtWidgets import QApplication; print('PySide6 imported successfully')"
        python -c "from PySide6.QtTest import QTest; print('QtTest imported successfully')"
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --junit-xml=unit-test-results.xml
        
    - name: Run GUI smoke tests (headless)
      run: |
        pytest tests/gui/ -v --tb=short --junit-xml=gui-test-results.xml -m "gui"
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --junit-xml=integration-test-results.xml
        
    - name: Run complete test suite with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html --cov-fail-under=70 --junit-xml=complete-test-results.xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          *-test-results.xml
          htmlcov/
          coverage.xml
          
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy pylint
        
    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Type checking with MyPy
      continue-on-error: true  # Don't fail CI on type errors for now
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Lint with PyLint
      continue-on-error: true  # Don't fail CI on lint errors for now
      run: |
        pylint src/ --disable=C0111,C0103,R0903,R0913,W0613 --exit-zero

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Scan code for security issues with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Test application startup
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        # Test that main application can start without errors
        timeout 10 python -m src.app || true
        
    - name: Build application (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        pyinstaller --name "CodeTestingSuite" --onedir --windowed --clean \
          --add-data "src/resources:resources" \
          --distpath dist/ \
          --workpath build/ \
          --specpath . \
          src/app/__main__.py
          
    - name: Build application (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --name "CodeTestingSuite" --onedir --windowed --clean --add-data "src/resources;resources" --distpath dist/ --workpath build/ --specpath . src/app/__main__.py
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: application-${{ matrix.os }}
        path: dist/