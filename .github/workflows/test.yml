name: Automated Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    env:
      # Force headless mode for GUI tests
      QT_QPA_PLATFORM: offscreen
      DISPLAY: ':99.0'
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Setup virtual display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb x11-utils libxkbcommon-x11-0 libgl1-mesa-dev
        # Start virtual display
        Xvfb :99 -screen 0 1024x768x24 &
        sleep 3
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y \
          libfontconfig1 \
          libglib2.0-0 \
          libglu1-mesa \
          libdbus-1-3 \
          libxi6 \
          libxrender1 \
          libxtst6
          
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Install required system libraries for Qt
        brew install pkg-config
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.13-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.13-
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      timeout-minutes: 15
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Verify Qt installation
      run: |
        python -c "from PySide6.QtWidgets import QApplication; print('PySide6 imported successfully')"
        python -c "from PySide6.QtTest import QTest; print('QtTest imported successfully')"
        
    - name: Run complete test suite with coverage
      timeout-minutes: 20
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=50 --junit-xml=test-results.xml --durations=10 --tb=short -n auto
        
    - name: Generate coverage comment data
      if: matrix.os == 'ubuntu-latest'
      run: |
        python -c "
        import json
        import xml.etree.ElementTree as ET
        
        # Parse coverage XML
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage_pct = float(root.attrib['line-rate']) * 100
        
        # Parse test results
        test_tree = ET.parse('test-results.xml')
        test_root = test_tree.getroot()
        
        data = {
          'coverage': f'{coverage_pct:.1f}%',
          'tests': test_root.attrib.get('tests', '0'),
          'failures': test_root.attrib.get('failures', '0'),
          'errors': test_root.attrib.get('errors', '0'),
          'skipped': test_root.attrib.get('skipped', '0')
        }
        
        with open('coverage-summary.json', 'w') as f:
          json.dump(data, f)
        print(f'Coverage: {data[\"coverage\"]}')
        print(f'Tests: {data[\"tests\"]} (Failures: {data[\"failures\"]}, Errors: {data[\"errors\"]}, Skipped: {data[\"skipped\"]})')
        " || echo "Could not generate coverage summary"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml
          coverage-summary.json
          
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ubuntu-pip-3.13-lint-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ubuntu-pip-3.13-lint-
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black==24.10.0 isort==5.13.2
        
    - name: Check code formatting with Black
      run: |
        black --check --diff --line-length=88 src/ tests/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff --profile=black --line-length=88 src/ tests/
        
    - name: Run pylint (optional quality check)
      continue-on-error: true
      run: |
        pip install pylint==3.3.1
        pylint src/ --rcfile=pyproject.toml --exit-zero --output-format=colorized

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ubuntu-pip-3.13-security-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ubuntu-pip-3.13-security-
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit==1.8.0
        
    - name: Scan code for security issues with Bandit
      continue-on-error: true
      run: |
        bandit -r src/ -f json -o bandit-report.json
        
    - name: Display bandit summary
      if: always()
      run: |
        bandit -r src/ || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: bandit-report.json

  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.13-build-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.13-build-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Test application startup
      timeout-minutes: 2
      continue-on-error: true
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        python -m src.app &
        sleep 5
        pkill -f "python -m src.app" || true
      shell: bash
        
    - name: Build application (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        pyinstaller --name "CodeTestingSuite" --onedir --windowed --clean \
          --add-data "src/resources:resources" \
          --distpath dist/ \
          --workpath build/ \
          --specpath build/ \
          src/app/__main__.py
          
    - name: Build application (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --name "CodeTestingSuite" --onedir --windowed --clean --add-data "src/resources;resources" --distpath dist/ --workpath build/ --specpath build/ src/app/__main__.py
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-${{ matrix.os }}
        path: dist/